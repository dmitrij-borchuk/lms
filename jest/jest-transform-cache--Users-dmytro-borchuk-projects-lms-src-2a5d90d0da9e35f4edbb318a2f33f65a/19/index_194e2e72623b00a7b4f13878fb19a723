/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.LanguageProvider = undefined;var cov_1abr7i00vd = function () {var path = '/Users/dmytro.borchuk/projects/lms/src/app/containers/LanguageProvider/index.js',hash = 'ad4f59ee3d71d4efdaa8e5e6b058c221dbc600a3',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/Users/dmytro.borchuk/projects/lms/src/app/containers/LanguageProvider/index.js', statementMap: { '0': { start: { line: 18, column: 4 }, end: { line: 22, column: 6 } }, '1': { start: { line: 26, column: 0 }, end: { line: 30, column: 2 } }, '2': { start: { line: 33, column: 24 }, end: { line: 36, column: 1 } }, '3': { start: { line: 35, column: 15 }, end: { line: 35, column: 25 } }, '4': { start: { line: 39, column: 2 }, end: { line: 41, column: 4 } } }, fnMap: { '0': { name: '(anonymous_0)', decl: { start: { line: 17, column: 2 }, end: { line: 17, column: 3 } }, loc: { start: { line: 17, column: 11 }, end: { line: 23, column: 3 } } }, '1': { name: '(anonymous_1)', decl: { start: { line: 35, column: 2 }, end: { line: 35, column: 3 } }, loc: { start: { line: 35, column: 15 }, end: { line: 35, column: 25 } } }, '2': { name: 'mapDispatchToProps', decl: { start: { line: 38, column: 9 }, end: { line: 38, column: 27 } }, loc: { start: { line: 38, column: 38 }, end: { line: 42, column: 1 } } } }, branchMap: {}, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0 }, f: { '0': 0, '1': 0, '2': 0 }, b: {}, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();







var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_reselect = require('reselect');
var /* istanbul ignore next */_reactIntl = require('react-intl');

var /* istanbul ignore next */_selectors = require('./selectors'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} /*

anguageProvider

this component connects the redux state language locale to the
ntlProvider component and i18n messages (loaded from `app/translations`)
var LanguageProvider = exports.LanguageProvider = function (_React$PureComponent) {_inherits(LanguageProvider, _React$PureComponent);function LanguageProvider() {_classCallCheck(this, LanguageProvider);return _possibleConstructorReturn(this, (LanguageProvider.__proto__ || Object.getPrototypeOf(LanguageProvider)).apply(this, arguments));}_createClass(LanguageProvider, [{ key: 'render', // eslint-disable-line react/prefer-stateless-function
    value: function render() {/* istanbul ignore next */++cov_1abr7i00vd.f[0];++cov_1abr7i00vd.s[0];return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.IntlProvider, /* istanbul ignore next */{ locale: this.props.locale, key: this.props.locale, messages: this.props.messages[this.props.locale] }, /* istanbul ignore next */_react2.default.Children.only(this.props.children)));

    } }]);return LanguageProvider;}( /* istanbul ignore next */_react2.default.PureComponent); /* istanbul ignore next */++cov_1abr7i00vd.s[1];


LanguageProvider.propTypes = {
  locale: /* istanbul ignore next */_react2.default.PropTypes.string,
  messages: /* istanbul ignore next */_react2.default.PropTypes.object,
  children: /* istanbul ignore next */_react2.default.PropTypes.element.isRequired };



var mapStateToProps = /* istanbul ignore next */(++cov_1abr7i00vd.s[2], /* istanbul ignore next */(0, _reselect.createSelector)(
/* istanbul ignore next */(0, _selectors.makeSelectLocale)(),
function (locale) {/* istanbul ignore next */++cov_1abr7i00vd.f[1];++cov_1abr7i00vd.s[3];return { locale: locale };}));


function mapDispatchToProps(dispatch) {/* istanbul ignore next */++cov_1abr7i00vd.f[2];++cov_1abr7i00vd.s[4];
  return {
    dispatch: dispatch };

} /* istanbul ignore next */exports.default =

/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(LanguageProvider);